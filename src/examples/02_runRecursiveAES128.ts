import { verify, Field } from "o1js";
import { Byte16 } from "../primitives/Bytes.js";
import { RecursiveAes128 } from "../implementations/RecursiveAES128.js";

// "Crypto is magic!"
const message = Byte16.fromBytes([
  0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x67,
  0x69, 0x63, 0x21,
]);

const cipher = Byte16.fromBytes([
  0xd3, 0xf4, 0xa2, 0x3b, 0x7e, 0x69, 0xf1, 0xc8, 0x4a, 0x6e, 0x2d, 0x7c, 0x5b,
  0x1a, 0x0e, 0x9f,
]);

const roundKeys = [
  Byte16.fromBytes([
    0x6a, 0x1d, 0x2b, 0x3c, 0x4e, 0x5f, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67,
    0x89, 0xab, 0xcd, 0xef,
  ]),
  Byte16.fromBytes([
    0xa1, 0xb2, 0xc3, 0xd4, 0xe5, 0xf6, 0x07, 0x18, 0x29, 0x3a, 0x4b, 0x5c,
    0x6d, 0x7e, 0x8f, 0x90,
  ]),
  Byte16.fromBytes([
    0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0x11, 0x22, 0x33, 0x44,
    0x55, 0x66, 0x77, 0x88,
  ]),
  Byte16.fromBytes([
    0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x13, 0x24, 0x35, 0x46,
    0x57, 0x68, 0x79, 0x8a,
  ]),
  Byte16.fromBytes([
    0xbc, 0xcd, 0xde, 0xef, 0xfa, 0x0b, 0x1c, 0x2d, 0x3e, 0x4f, 0x50, 0x61,
    0x72, 0x83, 0x94, 0xa5,
  ]),
  Byte16.fromBytes([
    0xa5, 0xb6, 0xc7, 0xd8, 0xe9, 0xfa, 0x0b, 0x1c, 0x2d, 0x3e, 0x4f, 0x50,
    0x61, 0x72, 0x83, 0x94,
  ]),
  Byte16.fromBytes([
    0x15, 0x26, 0x37, 0x48, 0x59, 0x6a, 0x7b, 0x8c, 0x9d, 0xae, 0xbf, 0xc0,
    0xd1, 0xe2, 0xf3, 0x04,
  ]),
  Byte16.fromBytes([
    0xd4, 0xe5, 0xf6, 0x07, 0x18, 0x29, 0x3a, 0x4b, 0x5c, 0x6d, 0x7e, 0x8f,
    0x90, 0xa1, 0xb2, 0xc3,
  ]),
  Byte16.fromBytes([
    0x67, 0x78, 0x89, 0x9a, 0xab, 0xbc, 0xcd, 0xde, 0xef, 0xfa, 0x0b, 0x1c,
    0x2d, 0x3e, 0x4f, 0x50,
  ]),
  Byte16.fromBytes([
    0x21, 0x32, 0x43, 0x54, 0x65, 0x76, 0x87, 0x98, 0xa9, 0xba, 0xcb, 0xdc,
    0xed, 0xfe, 0x0f, 0x10,
  ]),
  Byte16.fromBytes([
    0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
    0x44, 0x55, 0x66, 0x77,
  ]),
];

async function main() {
  console.log("Compiling Recursive AES zkProgram...");
  const { verificationKey } = await RecursiveAes128.compile();
  console.log("Recursive AES zkProgram compiled!");

  console.log("Generating AES proof for round 0...");
  let proof = await RecursiveAes128.addRoundKey(
    { round: Field(0), state: message },
    message,
    roundKeys[0],
  );

  for (let i = 1; i < 10; i++) {
    console.log(`Generating proof for round ${i}...`);
    proof = await RecursiveAes128.mainRound(
      { round: Field(i), state: new Byte16(Field(0), Field(0)) },
      proof.proof,
      roundKeys[i],
    );
  }

  console.log("Generating proof for final AES round...");
  proof = await RecursiveAes128.finalRound(
    { round: Field(10), state: cipher },
    proof.proof,
    roundKeys[10],
  );

  console.log("Final AES proof generated!");

  console.log("Verifying proof locally...");
  const isValid = await verify(proof.proof, verificationKey);
  console.log(
    `Proof verification result: ${isValid ? "✅ Valid" : "❌ Invalid"}`,
  );
}

main();
